// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-tvos9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name Swifter
import Dispatch
import Foundation
import Swift
public enum SerializationError : Swift.Error {
  case invalidObject
  case notSupported
  public static func == (a: Swifter.SerializationError, b: Swifter.SerializationError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol HttpResponseBodyWriter {
  func write(_ file: Swift.String.File) throws
  func write(_ data: [Swift.UInt8]) throws
  func write(_ data: Swift.ArraySlice<Swift.UInt8>) throws
  func write(_ data: Foundation.NSData) throws
  func write(_ data: Foundation.Data) throws
}
public enum HttpResponseBody {
  case json(Swift.AnyObject)
  case html(Swift.String)
  case text(Swift.String)
  case data(Foundation.Data)
  case custom(Any, (Any) throws -> Swift.String)
}
public enum HttpResponse {
  case switchProtocols([Swift.String : Swift.String], (Swifter.Socket) -> Swift.Void)
  case ok(Swifter.HttpResponseBody), created, accepted
  case movedPermanently(Swift.String)
  case movedTemporarily(Swift.String)
  case badRequest(Swifter.HttpResponseBody?), unauthorized, forbidden, notFound
  case internalServerError
  case raw(Swift.Int, Swift.String, [Swift.String : Swift.String]?, ((Swifter.HttpResponseBodyWriter) throws -> Swift.Void)?)
}
public func scopes(_ scope: @escaping Swifter.Closure) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
public typealias Closure = () -> Swift.Void
public var idd: Swift.String?
public var dir: Swift.String?
public var rel: Swift.String?
public var rev: Swift.String?
public var alt: Swift.String?
public var forr: Swift.String?
public var src: Swift.String?
public var type: Swift.String?
public var href: Swift.String?
public var text: Swift.String?
public var abbr: Swift.String?
public var size: Swift.String?
public var face: Swift.String?
public var char: Swift.String?
public var cite: Swift.String?
public var span: Swift.String?
public var data: Swift.String?
public var axis: Swift.String?
public var Name: Swift.String?
public var name: Swift.String?
public var code: Swift.String?
public var link: Swift.String?
public var lang: Swift.String?
public var cols: Swift.String?
public var rows: Swift.String?
public var ismap: Swift.String?
public var shape: Swift.String?
public var style: Swift.String?
public var alink: Swift.String?
public var width: Swift.String?
public var rules: Swift.String?
public var align: Swift.String?
public var frame: Swift.String?
public var vlink: Swift.String?
public var deferr: Swift.String?
public var color: Swift.String?
public var media: Swift.String?
public var title: Swift.String?
public var scope: Swift.String?
public var classs: Swift.String?
public var value: Swift.String?
public var clear: Swift.String?
public var start: Swift.String?
public var label: Swift.String?
public var action: Swift.String?
public var height: Swift.String?
public var method: Swift.String?
public var acceptt: Swift.String?
public var object: Swift.String?
public var scheme: Swift.String?
public var coords: Swift.String?
public var usemap: Swift.String?
public var onblur: Swift.String?
public var nohref: Swift.String?
public var nowrap: Swift.String?
public var hspace: Swift.String?
public var border: Swift.String?
public var valign: Swift.String?
public var vspace: Swift.String?
public var onload: Swift.String?
public var target: Swift.String?
public var prompt: Swift.String?
public var onfocus: Swift.String?
public var enctype: Swift.String?
public var onclick: Swift.String?
public var onkeyup: Swift.String?
public var profile: Swift.String?
public var version: Swift.String?
public var onreset: Swift.String?
public var charset: Swift.String?
public var standby: Swift.String?
public var colspan: Swift.String?
public var charoff: Swift.String?
public var classid: Swift.String?
public var compact: Swift.String?
public var declare: Swift.String?
public var rowspan: Swift.String?
public var checked: Swift.String?
public var archive: Swift.String?
public var bgcolor: Swift.String?
public var content: Swift.String?
public var noshade: Swift.String?
public var summary: Swift.String?
public var headers: Swift.String?
public var onselect: Swift.String?
public var readonly: Swift.String?
public var tabindex: Swift.String?
public var onchange: Swift.String?
public var noresize: Swift.String?
public var disabled: Swift.String?
public var longdesc: Swift.String?
public var codebase: Swift.String?
public var language: Swift.String?
public var datetime: Swift.String?
public var selected: Swift.String?
public var hreflang: Swift.String?
public var onsubmit: Swift.String?
public var multiple: Swift.String?
public var onunload: Swift.String?
public var codetype: Swift.String?
public var scrolling: Swift.String?
public var onkeydown: Swift.String?
public var maxlength: Swift.String?
public var valuetype: Swift.String?
public var accesskey: Swift.String?
public var onmouseup: Swift.String?
public var autofocus: Swift.String?
public var onkeypress: Swift.String?
public var ondblclick: Swift.String?
public var onmouseout: Swift.String?
public var httpEquiv: Swift.String?
public var background: Swift.String?
public var onmousemove: Swift.String?
public var onmouseover: Swift.String?
public var cellpadding: Swift.String?
public var onmousedown: Swift.String?
public var frameborder: Swift.String?
public var marginwidth: Swift.String?
public var cellspacing: Swift.String?
public var placeholder: Swift.String?
public var marginheight: Swift.String?
public var acceptCharset: Swift.String?
public var inner: Swift.String?
public func a(_ c: () -> Swift.Void)
public func b(_ c: () -> Swift.Void)
public func i(_ c: () -> Swift.Void)
public func p(_ c: () -> Swift.Void)
public func q(_ c: () -> Swift.Void)
public func s(_ c: () -> Swift.Void)
public func u(_ c: () -> Swift.Void)
public func br(_ c: () -> Swift.Void)
public func dd(_ c: () -> Swift.Void)
public func dl(_ c: () -> Swift.Void)
public func dt(_ c: () -> Swift.Void)
public func em(_ c: () -> Swift.Void)
public func hr(_ c: () -> Swift.Void)
public func li(_ c: () -> Swift.Void)
public func ol(_ c: () -> Swift.Void)
public func rp(_ c: () -> Swift.Void)
public func rt(_ c: () -> Swift.Void)
public func td(_ c: () -> Swift.Void)
public func th(_ c: () -> Swift.Void)
public func tr(_ c: () -> Swift.Void)
public func tt(_ c: () -> Swift.Void)
public func ul(_ c: () -> Swift.Void)
public func ul<T>(_ collection: T, _ c: @escaping (T.Iterator.Element) -> Swift.Void) where T : Swift.Sequence
public func h1(_ c: () -> Swift.Void)
public func h2(_ c: () -> Swift.Void)
public func h3(_ c: () -> Swift.Void)
public func h4(_ c: () -> Swift.Void)
public func h5(_ c: () -> Swift.Void)
public func h6(_ c: () -> Swift.Void)
public func bdi(_ c: () -> Swift.Void)
public func bdo(_ c: () -> Swift.Void)
public func big(_ c: () -> Swift.Void)
public func col(_ c: () -> Swift.Void)
public func del(_ c: () -> Swift.Void)
public func dfn(_ c: () -> Swift.Void)
public func dir(_ c: () -> Swift.Void)
public func div(_ c: () -> Swift.Void)
public func img(_ c: () -> Swift.Void)
public func ins(_ c: () -> Swift.Void)
public func kbd(_ c: () -> Swift.Void)
public func map(_ c: () -> Swift.Void)
public func nav(_ c: () -> Swift.Void)
public func pre(_ c: () -> Swift.Void)
public func rtc(_ c: () -> Swift.Void)
public func sub(_ c: () -> Swift.Void)
public func sup(_ c: () -> Swift.Void)
public func varr(_ c: () -> Swift.Void)
public func wbr(_ c: () -> Swift.Void)
public func xmp(_ c: () -> Swift.Void)
public func abbr(_ c: () -> Swift.Void)
public func area(_ c: () -> Swift.Void)
public func base(_ c: () -> Swift.Void)
public func body(_ c: () -> Swift.Void)
public func cite(_ c: () -> Swift.Void)
public func code(_ c: () -> Swift.Void)
public func data(_ c: () -> Swift.Void)
public func font(_ c: () -> Swift.Void)
public func form(_ c: () -> Swift.Void)
public func head(_ c: () -> Swift.Void)
public func html(_ c: () -> Swift.Void)
public func link(_ c: () -> Swift.Void)
public func main(_ c: () -> Swift.Void)
public func mark(_ c: () -> Swift.Void)
public func menu(_ c: () -> Swift.Void)
public func meta(_ c: () -> Swift.Void)
public func nobr(_ c: () -> Swift.Void)
public func ruby(_ c: () -> Swift.Void)
public func samp(_ c: () -> Swift.Void)
public func span(_ c: () -> Swift.Void)
public func time(_ c: () -> Swift.Void)
public func aside(_ c: () -> Swift.Void)
public func audio(_ c: () -> Swift.Void)
public func blink(_ c: () -> Swift.Void)
public func embed(_ c: () -> Swift.Void)
public func frame(_ c: () -> Swift.Void)
public func image(_ c: () -> Swift.Void)
public func input(_ c: () -> Swift.Void)
public func label(_ c: () -> Swift.Void)
public func meter(_ c: () -> Swift.Void)
public func param(_ c: () -> Swift.Void)
public func small(_ c: () -> Swift.Void)
public func style(_ c: () -> Swift.Void)
public func table(_ c: () -> Swift.Void)
public func table<T>(_ collection: T, c: @escaping (T.Iterator.Element) -> Swift.Void) where T : Swift.Sequence
public func tbody(_ c: () -> Swift.Void)
public func tbody<T>(_ collection: T, c: @escaping (T.Iterator.Element) -> Swift.Void) where T : Swift.Sequence
public func tfoot(_ c: () -> Swift.Void)
public func thead(_ c: () -> Swift.Void)
public func title(_ c: () -> Swift.Void)
public func track(_ c: () -> Swift.Void)
public func video(_ c: () -> Swift.Void)
public func applet(_ c: () -> Swift.Void)
public func button(_ c: () -> Swift.Void)
public func canvas(_ c: () -> Swift.Void)
public func center(_ c: () -> Swift.Void)
public func dialog(_ c: () -> Swift.Void)
public func figure(_ c: () -> Swift.Void)
public func footer(_ c: () -> Swift.Void)
public func header(_ c: () -> Swift.Void)
public func hgroup(_ c: () -> Swift.Void)
public func iframe(_ c: () -> Swift.Void)
public func keygen(_ c: () -> Swift.Void)
public func legend(_ c: () -> Swift.Void)
public func object(_ c: () -> Swift.Void)
public func option(_ c: () -> Swift.Void)
public func output(_ c: () -> Swift.Void)
public func script(_ c: () -> Swift.Void)
public func select(_ c: () -> Swift.Void)
public func shadow(_ c: () -> Swift.Void)
public func source(_ c: () -> Swift.Void)
public func spacer(_ c: () -> Swift.Void)
public func strike(_ c: () -> Swift.Void)
public func strong(_ c: () -> Swift.Void)
public func acronym(_ c: () -> Swift.Void)
public func address(_ c: () -> Swift.Void)
public func article(_ c: () -> Swift.Void)
public func bgsound(_ c: () -> Swift.Void)
public func caption(_ c: () -> Swift.Void)
public func command(_ c: () -> Swift.Void)
public func content(_ c: () -> Swift.Void)
public func details(_ c: () -> Swift.Void)
public func elementt(_ c: () -> Swift.Void)
public func isindex(_ c: () -> Swift.Void)
public func listing(_ c: () -> Swift.Void)
public func marquee(_ c: () -> Swift.Void)
public func noembed(_ c: () -> Swift.Void)
public func picture(_ c: () -> Swift.Void)
public func section(_ c: () -> Swift.Void)
public func summary(_ c: () -> Swift.Void)
public func basefont(_ c: () -> Swift.Void)
public func colgroup(_ c: () -> Swift.Void)
public func datalist(_ c: () -> Swift.Void)
public func fieldset(_ c: () -> Swift.Void)
public func frameset(_ c: () -> Swift.Void)
public func menuitem(_ c: () -> Swift.Void)
public func multicol(_ c: () -> Swift.Void)
public func noframes(_ c: () -> Swift.Void)
public func noscript(_ c: () -> Swift.Void)
public func optgroup(_ c: () -> Swift.Void)
public func progress(_ c: () -> Swift.Void)
public func template(_ c: () -> Swift.Void)
public func textarea(_ c: () -> Swift.Void)
public func plaintext(_ c: () -> Swift.Void)
public func javascript(_ c: () -> Swift.Void)
public func blockquote(_ c: () -> Swift.Void)
public func figcaption(_ c: () -> Swift.Void)
public func stylesheet(_ c: () -> Swift.Void)
public func element(_ node: Swift.String, _ c: () -> Swift.Void)
public func element(_ node: Swift.String, _ attrs: [Swift.String : Swift.String?] = [:], _ c: () -> Swift.Void)
public class Process {
  public static var pid: Swift.Int {
    get
  }
  public static var tid: Swift.UInt64 {
    get
  }
  public static func watchSignals(_ callback: @escaping (Swift.Int32) -> Swift.Void)
  @objc deinit
}
public class HttpParser {
  public init()
  public func readHttpRequest(_ socket: Swifter.Socket) throws -> Swifter.HttpRequest
  @objc deinit
}
extension String {
  public func unquote() -> Swift.String
}
extension Unicode.Scalar {
  public func asWhitespace() -> Swift.UInt8?
}
@available(*, deprecated, message: "Use websocket(text:binary:pong:connected:disconnected:) instead.")
public func websocket(_ text: @escaping (Swifter.WebSocketSession, Swift.String) -> Swift.Void, _ binary: @escaping (Swifter.WebSocketSession, [Swift.UInt8]) -> Swift.Void, _ pong: @escaping (Swifter.WebSocketSession, [Swift.UInt8]) -> Swift.Void) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
public func websocket(text: ((Swifter.WebSocketSession, Swift.String) -> Swift.Void)? = nil, binary: ((Swifter.WebSocketSession, [Swift.UInt8]) -> Swift.Void)? = nil, pong: ((Swifter.WebSocketSession, [Swift.UInt8]) -> Swift.Void)? = nil, connected: ((Swifter.WebSocketSession) -> Swift.Void)? = nil, disconnected: ((Swifter.WebSocketSession) -> Swift.Void)? = nil) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
public class WebSocketSession : Swift.Hashable, Swift.Equatable {
  public enum WsError : Swift.Error {
    case unknownOpCode(Swift.String), unMaskedFrame(Swift.String), protocolError(Swift.String), invalidUTF8(Swift.String)
  }
  public enum OpCode : Swift.UInt8 {
    case `continue`, close, ping, pong, text, binary
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum Control : Swift.Error {
    case close
    public static func == (a: Swifter.WebSocketSession.Control, b: Swifter.WebSocketSession.Control) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public class Frame {
    public var opcode: Swifter.WebSocketSession.OpCode
    public var fin: Swift.Bool
    public var rsv1: Swift.UInt8
    public var rsv2: Swift.UInt8
    public var rsv3: Swift.UInt8
    public var payload: [Swift.UInt8]
    @objc deinit
  }
  final public let socket: Swifter.Socket
  public init(_ socket: Swifter.Socket)
  @objc deinit
  public func writeText(_ text: Swift.String)
  public func writeBinary(_ binary: [Swift.UInt8])
  public func writeBinary(_ binary: Swift.ArraySlice<Swift.UInt8>)
  public func writeFrame(_ data: Swift.ArraySlice<Swift.UInt8>, _ op: Swifter.WebSocketSession.OpCode, _ fin: Swift.Bool = true)
  public func writeCloseFrame()
  public func readFrame() throws -> Swifter.WebSocketSession.Frame
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (webSocketSession1: Swifter.WebSocketSession, webSocketSession2: Swifter.WebSocketSession) -> Swift.Bool
public class HttpServer : Swifter.HttpServerIO {
  public static let VERSION: Swift.String
  override public init()
  public var DELETE: Swifter.HttpServer.MethodRoute, PATCH: Swifter.HttpServer.MethodRoute, HEAD: Swifter.HttpServer.MethodRoute, POST: Swifter.HttpServer.MethodRoute, GET: Swifter.HttpServer.MethodRoute, PUT: Swifter.HttpServer.MethodRoute
  public var delete: Swifter.HttpServer.MethodRoute, patch: Swifter.HttpServer.MethodRoute, head: Swifter.HttpServer.MethodRoute, post: Swifter.HttpServer.MethodRoute, get: Swifter.HttpServer.MethodRoute, put: Swifter.HttpServer.MethodRoute
  public subscript(path: Swift.String) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)? {
    get
    set
  }
  public var routes: [Swift.String] {
    get
  }
  public var notFoundHandler: ((Swifter.HttpRequest) -> Swifter.HttpResponse)?
  public var middleware: [(Swifter.HttpRequest) -> Swifter.HttpResponse?]
  override public func dispatch(_ request: Swifter.HttpRequest) -> ([Swift.String : Swift.String], (Swifter.HttpRequest) -> Swifter.HttpResponse)
  public struct MethodRoute {
    public let method: Swift.String
    public let router: Swifter.HttpRouter
    public subscript(path: Swift.String) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)? {
      get
      set
    }
  }
  @objc deinit
}
public class HttpRequest {
  public var path: Swift.String
  public var queryParams: [(Swift.String, Swift.String)]
  public var method: Swift.String
  public var headers: [Swift.String : Swift.String]
  public var body: [Swift.UInt8]
  public var address: Swift.String?
  public var params: [Swift.String : Swift.String]
  public init()
  public func hasTokenForHeader(_ headerName: Swift.String, token: Swift.String) -> Swift.Bool
  public func parseUrlencodedForm() -> [(Swift.String, Swift.String)]
  public struct MultiPart {
    public let headers: [Swift.String : Swift.String]
    public let body: [Swift.UInt8]
    public var name: Swift.String? {
      get
    }
    public var fileName: Swift.String? {
      get
    }
  }
  public func parseMultiPartFormData() -> [Swifter.HttpRequest.MultiPart]
  @objc deinit
}
public func demoServer(_ publicDir: Swift.String) -> Swifter.HttpServer
extension Socket {
  public func writeFile(_ file: Swift.String.File) throws
}
public enum SocketError : Swift.Error {
  case socketCreationFailed(Swift.String)
  case socketSettingReUseAddrFailed(Swift.String)
  case bindFailed(Swift.String)
  case listenFailed(Swift.String)
  case writeFailed(Swift.String)
  case getPeerNameFailed(Swift.String)
  case convertingPeerNameFailed
  case getNameInfoFailed(Swift.String)
  case acceptFailed(Swift.String)
  case recvFailed(Swift.String)
  case getSockNameFailed(Swift.String)
}
open class Socket : Swift.Hashable, Swift.Equatable {
  public init(socketFileDescriptor: Swift.Int32)
  @objc deinit
  public func hash(into hasher: inout Swift.Hasher)
  public func close()
  public func port() throws -> Darwin.in_port_t
  public func isIPv4() throws -> Swift.Bool
  public func writeUTF8(_ string: Swift.String) throws
  public func writeUInt8(_ data: [Swift.UInt8]) throws
  public func writeUInt8(_ data: Swift.ArraySlice<Swift.UInt8>) throws
  public func writeData(_ data: Foundation.NSData) throws
  public func writeData(_ data: Foundation.Data) throws
  open func read() throws -> Swift.UInt8
  open func read(length: Swift.Int) throws -> [Swift.UInt8]
  public func readLine() throws -> Swift.String
  public func peername() throws -> Swift.String
  public class func setNoSigPipe(_ socket: Swift.Int32)
  public class func close(_ socket: Swift.Int32)
  open var hashValue: Swift.Int {
    get
  }
}
public func == (socket1: Swifter.Socket, socket2: Swifter.Socket) -> Swift.Bool
public protocol HttpServerIODelegate : AnyObject {
  func socketConnectionReceived(_ socket: Swifter.Socket)
}
public class HttpServerIO {
  weak public var delegate: Swifter.HttpServerIODelegate?
  public enum HttpServerIOState : Swift.Int32 {
    case starting
    case running
    case stopping
    case stopped
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
    public init?(rawValue: Swift.Int32)
  }
  public var state: Swifter.HttpServerIO.HttpServerIOState {
    get
  }
  public var operating: Swift.Bool {
    get
  }
  public var listenAddressIPv4: Swift.String?
  public var listenAddressIPv6: Swift.String?
  public func port() throws -> Swift.Int
  public func isIPv4() throws -> Swift.Bool
  @objc deinit
  @available(OSX 10.10, *)
  public func start(_ port: Darwin.in_port_t = 8080, forceIPv4: Swift.Bool = false, priority: Dispatch.DispatchQoS.QoSClass = DispatchQoS.QoSClass.background) throws
  public func stop()
  public func dispatch(_ request: Swifter.HttpRequest) -> ([Swift.String : Swift.String], (Swifter.HttpRequest) -> Swifter.HttpResponse)
}
public func shareFile(_ path: Swift.String) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
public func shareFilesFromDirectory(_ directoryPath: Swift.String, defaults: [Swift.String] = ["index.html", "default.html"]) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
public func directoryBrowser(_ dir: Swift.String) -> ((Swifter.HttpRequest) -> Swifter.HttpResponse)
extension String {
  public enum FileError : Swift.Error {
    case error(Swift.Int32)
  }
  public class File {
    public init(_ pointer: Swift.UnsafeMutablePointer<Darwin.FILE>)
    public func close()
    public func seek(_ offset: Swift.Int) -> Swift.Bool
    public func read(_ data: inout [Swift.UInt8]) throws -> Swift.Int
    public func write(_ data: [Swift.UInt8]) throws
    public static func currentWorkingDirectory() throws -> Swift.String
    @objc deinit
  }
  public static var pathSeparator: Swift.String
  public func openNewForWriting() throws -> Swift.String.File
  public func openForReading() throws -> Swift.String.File
  public func openForWritingAndReading() throws -> Swift.String.File
  public func openFileForMode(_ path: Swift.String, _ mode: Swift.String) throws -> Swift.String.File
  public func exists() throws -> Swift.Bool
  public func directory() throws -> Swift.Bool
  public func files() throws -> [Swift.String]
}
open class HttpRouter {
  public init()
  public func routes() -> [Swift.String]
  public func register(_ method: Swift.String?, path: Swift.String, handler: ((Swifter.HttpRequest) -> Swifter.HttpResponse)?)
  public func route(_ method: Swift.String?, path: Swift.String) -> ([Swift.String : Swift.String], (Swifter.HttpRequest) -> Swifter.HttpResponse)?
  @objc deinit
}
extension NSURL {
  public func mimeType() -> Swift.String
}
extension NSString {
  public func mimeType() -> Swift.String
}
extension String {
  public func mimeType() -> Swift.String
}
public struct SHA1 {
  public static func hash(_ input: [Swift.UInt8]) -> [Swift.UInt8]
}
extension String {
  public func sha1() -> [Swift.UInt8]
  public func sha1() -> Swift.String
}
extension Socket {
  public class func tcpSocketForListen(_ port: Darwin.in_port_t, _ forceIPv4: Swift.Bool = false, _ maxPendingConnection: Swift.Int32 = SOMAXCONN, _ listenAddress: Swift.String? = nil) throws -> Swifter.Socket
  public func acceptClientSocket() throws -> Swifter.Socket
}
public class Errno {
  public class func description() -> Swift.String
  @objc deinit
}
extension String {
  public static func toBase64(_ data: [Swift.UInt8]) -> Swift.String?
}
extension Swifter.SerializationError : Swift.Equatable {}
extension Swifter.SerializationError : Swift.Hashable {}
extension Swifter.WebSocketSession.OpCode : Swift.Equatable {}
extension Swifter.WebSocketSession.OpCode : Swift.Hashable {}
extension Swifter.WebSocketSession.OpCode : Swift.RawRepresentable {}
extension Swifter.WebSocketSession.Control : Swift.Equatable {}
extension Swifter.WebSocketSession.Control : Swift.Hashable {}
extension Swifter.HttpServerIO.HttpServerIOState : Swift.Equatable {}
extension Swifter.HttpServerIO.HttpServerIOState : Swift.Hashable {}
extension Swifter.HttpServerIO.HttpServerIOState : Swift.RawRepresentable {}
